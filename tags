!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BRIDGE_H	bridge.h	3;"	d
BUFF_SIZE	client.h	24;"	d
CC	makefile	/^CC=gcc$/;"	m
CFLAGS	makefile	/^CFLAGS=-c $/;"	m
EXECUTABLE	makefile	/^EXECUTABLE=3700bridge$/;"	m
FAIL	client.h	22;"	d
LDFLAGS	makefile	/^LDFLAGS=$/;"	m
OBJECTS	makefile	/^OBJECTS=$(SOURCES:.c=.o)$/;"	m
RUNNING	client.h	23;"	d
SOURCES	makefile	/^SOURCES=main.c bridge.c strhelper.c$/;"	m
SUCCESS	client.h	21;"	d
addHost	bridge.c	/^int addHost(bridge *b, int lanNum, int hostName) {$/;"	f
add_event	run	/^sub add_event {$/;"	s
add_event	run_tmp	/^sub add_event {$/;"	s
add_handle	run	/^sub add_handle {$/;"	s
add_handle	run_tmp	/^sub add_handle {$/;"	s
add_host	run	/^sub add_host {$/;"	s
add_host	run_tmp	/^sub add_host {$/;"	s
bridge	bridge.h	/^} bridge;$/;"	t	typeref:struct:__anon2
bridgeClose	bridge.c	/^int bridgeClose(bridge * b) {$/;"	f
bridgeInit	bridge.c	/^int bridgeInit(bridge *b) {$/;"	f
bridgeRun	bridge.c	/^int bridgeRun(bridge *b) {$/;"	f
broadcast	run	/^sub broadcast {$/;"	s
broadcast	run_tmp	/^sub broadcast {$/;"	s
buf	bridge.h	/^	char	buf[256];$/;"	m	struct:__anon1
buffer	client.h	/^	char *buffer;$/;"	m	struct:__anon4
bytes_read	bridge.h	/^	int	bytes_read;$/;"	m	struct:__anon1
bytes_written	bridge.h	/^	int	bytes_written;$/;"	m	struct:__anon1
client	client.h	/^} client;$/;"	t	typeref:struct:__anon4
clientCheckSuc	client.c	/^int clientCheckSuc(client *c, char *buffer) {$/;"	f
clientInit	client.c	/^int clientInit(client *c) {$/;"	f
clientMath	client.c	/^int clientMath(client *c) {$/;"	f
clientRun	client.c	/^void clientRun(client *c) {$/;"	f
create_lan_name	strhelper.c	/^char * create_lan_name(const char * source_name) {$/;"	f
dump_events	run	/^sub dump_events {$/;"	s
dump_events	run_tmp	/^sub dump_events {$/;"	s
event_send_packet	run	/^sub event_send_packet {$/;"	s
event_send_packet	run_tmp	/^sub event_send_packet {$/;"	s
event_start_bridge	run	/^sub event_start_bridge {$/;"	s
event_start_bridge	run_tmp	/^sub event_start_bridge {$/;"	s
event_stop	run	/^sub event_stop {$/;"	s
event_stop	run_tmp	/^sub event_stop {$/;"	s
event_stop_bridge	run	/^sub event_stop_bridge {$/;"	s
event_stop_bridge	run_tmp	/^sub event_stop_bridge {$/;"	s
f	strhelper.h	/^FILE *f;$/;"	v
findHost	bridge.c	/^int findHost(bridge *b, short hostName) {$/;"	f
format_bytes	test	/^sub format_bytes {$/;"	s
format_message	run	/^sub format_message {$/;"	s
format_message	run_tmp	/^sub format_message {$/;"	s
getSource	strhelper.c	/^int getSource(char * buf) {$/;"	f
get_handle	run	/^sub get_handle {$/;"	s
get_handle	run_tmp	/^sub get_handle {$/;"	s
get_id	run	/^sub get_id {$/;"	s
get_id	run_tmp	/^sub get_id {$/;"	s
get_name	run	/^sub get_name {$/;"	s
get_name	run_tmp	/^sub get_name {$/;"	s
get_next_event	run	/^sub get_next_event {$/;"	s
get_next_event	run_tmp	/^sub get_next_event {$/;"	s
get_path	run	/^sub get_path {$/;"	s
get_path	run_tmp	/^sub get_path {$/;"	s
get_random_host	run	/^sub get_random_host {$/;"	s
get_random_host	run_tmp	/^sub get_random_host {$/;"	s
get_random_host_name	run	/^sub get_random_host_name {$/;"	s
get_random_host_name	run_tmp	/^sub get_random_host_name {$/;"	s
get_random_lan	run	/^sub get_random_lan {$/;"	s
get_random_lan	run_tmp	/^sub get_random_lan {$/;"	s
host	bridge.h	/^} host;$/;"	t	typeref:struct:__anon3
host_list	bridge.h	/^host *host_list;$/;"	v
hostname	client.h	/^	char *hostname;$/;"	m	struct:__anon4
id	bridge.h	/^	int 	id;$/;"	m	struct:__anon2
lan	bridge.h	/^} lan;$/;"	t	typeref:struct:__anon1
lanNum	bridge.h	/^	int	lanNum;$/;"	m	struct:__anon3
lans	bridge.h	/^	lan	*lans;$/;"	m	struct:__anon2
main	main.c	/^int main(int argc, char *argv[]) {$/;"	f
mylog	run	/^sub mylog {$/;"	s
mylog	run_tmp	/^sub mylog {$/;"	s
name	bridge.h	/^	char 	*name;$/;"	m	struct:__anon1
name	bridge.h	/^	short	name;$/;"	m	struct:__anon3
numHosts	bridge.h	/^	int	numHosts;$/;"	m	struct:__anon2
numLans	bridge.h	/^	int	numLans;$/;"	m	struct:__anon2
pad	test	/^sub pad {$/;"	s
port	client.h	/^	int port;$/;"	m	struct:__anon4
post	test	/^sub post {$/;"	s
print_lan_name	strhelper.c	/^void print_lan_name(const char * name) {$/;"	f
recv_message	run	/^sub recv_message {$/;"	s
recv_message	run_tmp	/^sub recv_message {$/;"	s
remove_event	run	/^sub remove_event {$/;"	s
remove_event	run_tmp	/^sub remove_event {$/;"	s
remove_handle	run	/^sub remove_handle {$/;"	s
remove_handle	run_tmp	/^sub remove_handle {$/;"	s
runPerfTest	test	/^sub runPerfTest {$/;"	s
runTest	test	/^sub runTest {$/;"	s
setHostname	client.c	/^void setHostname(client *c, char *hostname) {$/;"	f
setPort	client.c	/^void setPort(client *c, int port) {$/;"	f
setStudentID	client.c	/^void setStudentID(client *c, int studentID) {$/;"	f
socketInit	bridge.c	/^int socketInit(lan *l) {$/;"	f
sockfd	bridge.h	/^	int	sockfd;$/;"	m	struct:__anon1
sockfd	client.h	/^	int sockfd;$/;"	m	struct:__anon4
state	client.c	/^int state = 0; $/;"	v
strcpy_lan_name	strhelper.c	/^void strcpy_lan_name(char * dest, const char * src) {$/;"	f
strdup_lan_name	strhelper.c	/^char * strdup_lan_name(const char * name) {$/;"	f
strlen_lan_name	strhelper.c	/^unsigned int strlen_lan_name(const char * name) {$/;"	f
studentID	client.h	/^	int studentID;$/;"	m	struct:__anon4
time	bridge.h	/^	int	time;$/;"	m	struct:__anon3
write_buffer	client.h	/^	char *write_buffer;$/;"	m	struct:__anon4
